@page "/"

<PageTitle>FileWatcher.Server</PageTitle>

<h1>FileWatcher Example</h1>

<p>Change a file in x location and see this update...</p>
<p>Assumes 8 files in the given folder: <code>Player{1-4}.txt</code> and <code>PotOddsPlayer{1-4}.txt</code></p>

<p>@FileContents</p>

<table>
    <thead>
        <tr>
            <th>File</th>
            <th>Name</th>
            <th>File</th>
            <th>PotOdds</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Player1.txt</td>
            <td>@Player1</td>
            <td>PotOddsPlayer1.txt</td>
            <td>@PotOddsPlayer1</td>
        </tr>
        <tr>
            <td>Player2.txt</td>
            <td>@Player2</td>
            <td>PotOddsPlayey2.txt</td>
            <td>@PotOddsPlayer2</td>
        </tr>
        <tr>
            <td>Player3.txt</td>
            <td>@Player3</td>
            <td>PotOddsPlayer3.txt</td>
            <td>@PotOddsPlayer3</td>
        </tr>
        <tr>
            <td>Player4.txt</td>
            <td>@Player4</td>
            <td>PotOddsPlayer4.txt</td>
            <td>@PotOddsPlayer4</td>
        </tr>
    </tbody>
</table>

@code {
    private string FileContents = "Hello, World!";
    private string Player1 = "";
    private string Player2 = "";
    private string Player3 = "";
    private string Player4 = "";
    private string PotOddsPlayer1 = "";
    private string PotOddsPlayer2 = "";
    private string PotOddsPlayer3 = "";
    private string PotOddsPlayer4 = "";

    private static string path = @"\Poker\players";
    private FileSystemWatcher watcher = new FileSystemWatcher(path);

    protected override void OnInitialized()
    {
        SetupWatcher();
        UpdateStats();
    }

    #region Watcher

    private void SetupWatcher()
    {
        watcher.NotifyFilter = NotifyFilters.Attributes
                                 | NotifyFilters.CreationTime
                                 | NotifyFilters.DirectoryName
                                 | NotifyFilters.FileName
                                 | NotifyFilters.LastAccess
                                 | NotifyFilters.LastWrite
                                 | NotifyFilters.Security
                                 | NotifyFilters.Size;

        watcher.Changed += OnChanged;
        watcher.Created += OnCreated;
        watcher.Deleted += OnDeleted;
        watcher.Renamed += OnRenamed;

        watcher.Filter = "*.txt";
        watcher.IncludeSubdirectories = true;
        watcher.EnableRaisingEvents = true;
    }

    private void OnChanged(object sender, FileSystemEventArgs e)
    {
        FileContents = "Changed: " + DateTime.Now;
        UpdateStats();

        InvokeAsync(() => StateHasChanged());
    }

    private static void OnCreated(object sender, FileSystemEventArgs e)
    {
        string value = $"Created: {e.FullPath}";
        Console.WriteLine(value);
    }

    private static void OnDeleted(object sender, FileSystemEventArgs e) =>
        Console.WriteLine($"Deleted: {e.FullPath}");

    private static void OnRenamed(object sender, RenamedEventArgs e)
    {
        Console.WriteLine($"Renamed:");
        Console.WriteLine($"    Old: {e.OldFullPath}");
        Console.WriteLine($"    New: {e.FullPath}");
    }

    #endregion Watcher

    private void UpdateStats()
    {
        Player1 = GetPlayerName("1");
        Player2 = GetPlayerName("2");
        Player3 = GetPlayerName("3");
        Player4 = GetPlayerName("4");

        PotOddsPlayer1 = GetPlayerPotOdds("1");
        PotOddsPlayer2 = GetPlayerPotOdds("2");
        PotOddsPlayer3 = GetPlayerPotOdds("3");
        PotOddsPlayer4 = GetPlayerPotOdds("4");
    }

    private string GetPlayerName(string playerNumber)
    {
        return File.ReadAllText(Path.Combine(path, $"Player{playerNumber}.txt"));
    }

    private string GetPlayerPotOdds(string playerNumber)
    {
        return File.ReadAllText(Path.Combine(path, $"PotOddsPlayer{playerNumber}.txt"));
    }
}